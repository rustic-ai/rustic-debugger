# GitHub Actions Workflow Contracts for Documentation System

# Contract: Documentation Build and Deploy Workflow
name: documentation-build-deploy
description: Contract for automated documentation build and deployment to GitHub Pages

on:
  # Trigger on documentation content changes
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - '.github/workflows/docs-*'

  # Manual trigger for screenshot generation
  workflow_dispatch:
    inputs:
      generate_screenshots:
        description: 'Generate new screenshots'
        required: false
        default: false
        type: boolean
      screenshot_pages:
        description: 'Specific pages to screenshot (comma-separated)'
        required: false
        type: string

# Contract: Job Structure and Dependencies
jobs:
  validate-content:
    name: Validate Documentation Content
    runs-on: ubuntu-latest
    outputs:
      content-valid: ${{ steps.validate.outputs.valid }}
      warnings: ${{ steps.validate.outputs.warnings }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Validate markdown content
        id: validate
        run: |
          cd docs
          pnpm run validate
          echo "valid=true" >> $GITHUB_OUTPUT

      - name: Check internal links
        run: |
          cd docs
          pnpm run check-links

  generate-screenshots:
    name: Generate Application Screenshots
    runs-on: ubuntu-latest
    if: github.event.inputs.generate_screenshots == 'true' || contains(github.event.head_commit.message, '[screenshots]')
    needs: validate-content
    outputs:
      screenshots-generated: ${{ steps.screenshots.outputs.count }}
      screenshot-hashes: ${{ steps.screenshots.outputs.hashes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install browsers
        run: npx playwright install --with-deps

      - name: Start application services
        run: |
          pnpm run start:backend &
          pnpm run start:frontend &
          sleep 30  # Wait for services to start

      - name: Generate screenshots
        id: screenshots
        env:
          BASE_URL: http://localhost:3000
          PAGES: ${{ github.event.inputs.screenshot_pages || 'all' }}
        run: |
          cd docs
          pnpm run screenshots
          echo "count=$(ls src/assets/screenshots/*.png | wc -l)" >> $GITHUB_OUTPUT

      - name: Optimize images
        run: |
          cd docs
          pnpm run optimize-images

      - name: Commit screenshot updates
        if: steps.screenshots.outputs.count > 0
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/src/assets/screenshots/
          git commit -m "chore: update documentation screenshots [skip ci]" || exit 0
          git push

  build-documentation:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    needs: [validate-content]
    outputs:
      build-success: ${{ steps.build.outputs.success }}
      pages-built: ${{ steps.build.outputs.pages }}
      site-size: ${{ steps.build.outputs.size }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch latest including screenshot commits
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build documentation
        id: build
        run: |
          cd docs
          pnpm run build
          echo "success=true" >> $GITHUB_OUTPUT
          echo "pages=$(find dist -name '*.html' | wc -l)" >> $GITHUB_OUTPUT
          echo "size=$(du -sb dist | cut -f1)" >> $GITHUB_OUTPUT

      - name: Run Lighthouse CI
        run: |
          cd docs
          pnpm run lighthouse-ci

      - name: Upload build artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/dist

  deploy-to-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-documentation
    if: needs.build-documentation.outputs.build-success == 'true'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify-completion:
    name: Notify Build Completion
    runs-on: ubuntu-latest
    needs: [validate-content, build-documentation, deploy-to-pages]
    if: always()
    steps:
      - name: Create build summary
        run: |
          echo "## Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Content Validation**: ${{ needs.validate-content.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pages Built**: ${{ needs.build-documentation.outputs.pages-built || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Site Size**: ${{ needs.build-documentation.outputs.site-size || '0' }} bytes" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: ${{ needs.deploy-to-pages.result }}" >> $GITHUB_STEP_SUMMARY

# Contract: Environment Variables and Secrets
env:
  # Required environment variables
  NODE_ENV: production
  DOCS_BASE_URL: https://{organization}.github.io/{repository}

  # Application URLs for screenshot generation
  FRONTEND_URL: http://localhost:3000
  BACKEND_URL: http://localhost:4000

# Contract: Required Repository Secrets
# - GITHUB_TOKEN: Automatically provided
# - No additional secrets required for basic operation

# Contract: Required Repository Settings
# Pages:
#   - Source: GitHub Actions
#   - Build and deployment source: GitHub Actions
#
# Permissions:
#   - Contents: read
#   - Pages: write
#   - ID Token: write

# Contract: Failure Handling
failure_handling:
  validation_failure:
    - Stop pipeline immediately
    - Report validation errors in job summary
    - Do not proceed with build or deployment

  screenshot_failure:
    - Continue with build using existing screenshots
    - Log warning about outdated screenshots
    - Create issue for manual review

  build_failure:
    - Stop deployment
    - Preserve previous successful deployment
    - Report build errors in job summary

  deployment_failure:
    - Retry deployment once
    - If retry fails, preserve previous deployment
    - Create issue for manual investigation

# Contract: Performance Targets
performance_targets:
  build_time:
    validation: "< 2 minutes"
    screenshot_generation: "< 10 minutes"
    site_build: "< 5 minutes"
    deployment: "< 3 minutes"
    total_pipeline: "< 20 minutes"

  resource_usage:
    max_memory: "4GB"
    max_storage: "10GB"
    concurrent_jobs: "3"

# Contract: Artifact Management
artifacts:
  build_artifacts:
    name: "documentation-site"
    path: "docs/dist"
    retention_days: 30

  screenshot_artifacts:
    name: "screenshots"
    path: "docs/src/assets/screenshots"
    retention_days: 90

  lighthouse_reports:
    name: "lighthouse-reports"
    path: "docs/lighthouse"
    retention_days: 7

# Contract: Monitoring and Alerts
monitoring:
  success_metrics:
    - Build completion time
    - Site size after optimization
    - Lighthouse performance scores
    - Number of pages successfully built

  failure_conditions:
    - Validation errors > 0
    - Build time > 20 minutes
    - Lighthouse performance score < 90
    - Deployment failures > 1 per day

# Contract: Rollback Strategy
rollback:
  automatic:
    - If deployment fails validation checks
    - If Lighthouse scores drop below threshold

  manual:
    - Via GitHub Pages settings
    - By reverting commit and re-triggering workflow
    - By disabling GitHub Pages temporarily